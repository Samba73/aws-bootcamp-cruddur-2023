AWSTemplateFormatVersion: '2010-09-09'
Description: |
   - Create postgres 
Parameters:
  NetworkingStack:
    Type: String
  ClusterStack:
    Type: String
  DBInstanceClass:
    Type: String
    Default: 'db.t3.micro'
  DBInstanceIdentifier:
    Type: String
    Default: cruddur-db
  DBName:
    Type: String   
  DBMasterUsername:
    Type: String
  DBMasterUserPwd:
    Type: String
    NoEcho: true
  DBPort:
    Type: Number
    Default: 5432
  DBStorageType:
    Type: String
    Default: gp3
  DBBackupRetention:
    Type: Number
    Default: 0
  DBEngineVersion:
    Type: String
    Default: '15.2'
Resources:
  RDSPostgres:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: 'Snapshot'
    UpdateReplacePolicy: 'Snapshot'
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: !Ref DBInstanceClass
      AllowMajorVersionUpgrade: true
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: !Ref DBBackupRetention
      DBInstanceIdentifier: !Ref DBInstanceIdentifier
      DBName: !Ref DBName
      DBSubnetGroupName: !Ref RDSSubnetGroup
      DeletionProtection: true
      EnablePerformanceInsights: true
      Engine: postgres
      EngineVersion: !Ref DBEngineVersion
      MasterUsername: !Ref DBMasterUsername
      MasterUserPassword: !Ref DBMasterUserPwd
      PubliclyAccessible: true
      StorageType: !Ref DBStorageType
      VPCSecurityGroups:
        - !GetAtt RDSPostgresSG.GroupId
 
  RDSPostgresSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}RDSPostgresSG'
      GroupDescription: Internet facing SG for ECS Service
      VpcId: 
        Fn::ImportValue:
          !Sub '${NetworkingStack}VpcId'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref DBPort
          ToPort: !Ref DBPort
          SourceSecurityGroupId: 
            Fn::ImportValue:
              !Sub '${ClusterStack}ServiceSecurityGrpId'
          Description: RDS Postgres SG           
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub '${AWS::StackName}RDSSubnetGrp'
      DBSubnetGroupDescription: !Sub '${AWS::StackName}RDSSubnetGrp'
      SubnetIds:
        Fn::Split:
          - ","
          - Fn::ImportValue:
              !Sub '${NetworkingStack}PubSubnets'
           
Outputs:
  RDSSecurityGrpId:
    Value: !GetAtt RDSPostgresSG.GroupId
    Export:
      Name: !Sub '${AWS::StackName}RDSSecurityGrpId' 