AWSTemplateFormatVersion: 2010-09-09
Description: |
  setup ECS cluster

Parameters:
  NetworkingStack:
    Type: String
    Description: This is base network stack like vpc, subnet
  ALBSslCertArn:
    Type: String
    Default: arn:aws:acm:<Region>:<AccountID>:certificate/<CertID>
  FEHealthCheckIntervalSeconds: 
    Type: Number
    Default: 15
  FEHealthCheckPath:
    Type: String
    Default: /
  FEHealthCheckPort: 
    Type: String
    Default: 80
  FEHealthCheckProtocol: 
    Type: String
    Default: HTTP
  FEHealthCheckTimeoutSeconds: 
    Type: Number
    Default: 5
  FEHealthyThresholdCount: 
    Type: Number
    Default: 5
  FEPort: 
    Type: String
    Default: 3000
  FEUnhealthyThresholdCount:
    Type: Number
    Default: 2  
  BEHealthCheckIntervalSeconds: 
    Type: Number
    Default: 15
  BEHealthCheckPath:
    Type: String
    Default: /api/health_check
  BEHealthCheckPort: 
    Type: String
    Default: 80
  BEHealthCheckProtocol: 
    Type: String
    Default: HTTP
  BEHealthCheckTimeoutSeconds: 
    Type: Number
    Default: 5
  BEHealthyThresholdCount: 
    Type: Number
    Default: 5
  BEPort: 
    Type: String
    Default: 4567  
  BEUnhealthyThresholdCount:
    Type: Number
    Default: 2
Resources:
  FargateCluster:
    Type: AWS::ECS::Cluster
    Properties:
      CapacityProviders: 
        - FARGATE
      ClusterName: !Sub '{AWS::StackName}FargateCluster'
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      Configuration:  
        ExecuteCommandConfiguration: 
          Logging: DEFAULT
      ServiceConnectDefaults:
        Namespace: cruddur
  ALB:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Name: !Sub '${AWS::StackName}ALB'
      Type: Application
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: routing.http2.enabled
          Value: true
        - Key: routing.http.preserve_host_header.enabled
          Value: false
        - Key: routing.http.xff_header_processing.mode
          Value: append
        - Key: deletion_protection.enabled
          Value: true
        - Key: load_balancing.cross_zone.enabled
          Value: true
        - Key: access_logs.s3.enabled
          Value: false 
        # if required to turn on logs
        # - Key: access_logs.s3.bucket
        #   Value: bucket-name
        # - Key: access_logs.s3.prefix
        #   Value: ""
      Scheme: internet-facing
      Subnets: 
        Fn::Split:
          - ","
          - Fn::ImportValue:
              !Sub '${NetworkingStack}PubSubnets'
      SecurityGroups: !GetAtt ALBSG.GroupId
  HTTPListener:    
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
           Protocol: "HTTPS"
           Port: 443
           Host: "#{host}"
           Path: "/#{path}"
           Query: "#{query}"
           StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: "HTTP"
  HTTPSListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGrpArn: !Ref Frontend-TG
      Certificates:
        - CertificateArn: !Ref ALBSslCertArn
      LoadBalancerArn: !Ref ALB
      Port: '443'
      Protocol: HTTPS
  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Internet facing SG for cruddur ALB
      GroupName: !Sub '{AWS::StackName}AlbSG'
      VpcId: 
        Fn::ImportValue:
          !Sub '{NetworkingStack}VpcId'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0   
          Description: Public HTTP
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Public HTTPS
  ApiALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:   
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values: 
              - api.cruddur.in
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroupArn: !Ref Backend-TG
      ListenerArn: !Ref HTTPSListener
      Priority: 1
      
  FrontendTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: !Ref FEHealthCheckIntervalSeconds
      HealthCheckPath: !Ref FEHealthCheckPath
      HealthCheckPort: !Ref FEHealthCheckPort
      HealthCheckProtocol: !Ref FEHealthCheckProtocol
      HealthCheckTimeoutSeconds: !Ref FEHealthCheckTimeoutSeconds
      HealthyThresholdCount: !Ref FEHealthyThresholdCount
      IpAddressType: ipv4
      Matcher: 
        HttpCode: 200
      Port: !Ref FEPort
      Protocol: HTTP
      ProtocolVersion: HTTP1
      Tags: 
        - Key: target-grp-name
          Value: frontend
      TargetGroupAttributes: 
        - Key: deregistration_delay.timeout_seconds
          Value: 0
      TargetType: ip
      UnhealthyThresholdCount: !Ref FEUnhealthyThresholdCount
      VpcId: 
        Fn::ImportValue
          !Sub '${NetworkingStack}VpcId'
  BackendTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: !Ref BEHealthCheckIntervalSeconds
      HealthCheckPath: !Ref BEHealthCheckPath
      HealthCheckPort: !Ref HealthCheckPort
      HealthCheckProtocol: !Ref BEHealthCheckProtocol
      HealthCheckTimeoutSeconds: !Ref BEHealthCheckTimeoutSeconds
      HealthyThresholdCount: !Ref BEHealthyThresholdCount
      IpAddressType: ipv4
      Matcher: 
        HttpCode: 200
      Port: !Ref BEPort
      Protocol: HTTP
      ProtocolVersion: HTTP1
      Tags: 
        - Key: target-grp-name
          Value: backend
      TargetGroupAttributes: 
        - Key: deregistration_delay.timeout_seconds
          Value: 0
      TargetType: ip
      UnhealthyThresholdCount: !Ref BEUnhealthyThresholdCount
      VpcId: 
        Fn::ImportValue
          !Sub '${NetworkingStack}VpcId'
  Outputs:        
    ClusterName:
      Value: !Ref FargateCluster
      Export:
        Name: !Sub '{AWS::StackName}ClusterName'
    ALBSecurityGrpId:
      Value: !Ref ALBSG.GroupId
      Export:
        Name: !Sub '{AWS::StackName}ALBSecGrpId'
    FrontendTGArn:
      Value: !Ref FrontendTG
      Export:
        Name: !Sub '{AWS::StackName}FrontEndTGArn'
    BackendTGArn:
      Value: !Ref BackendTG
      Export:
        Name: !Sub '{AWS::StackName}BackendTGArn'   
    
