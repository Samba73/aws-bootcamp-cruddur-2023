var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { hrTime } from '@opentelemetry/core';
import { diag } from '@opentelemetry/api';
import { InstrumentationBase } from '@opentelemetry/instrumentation';
import { VERSION } from './version';
var LONGTASK_PERFORMANCE_TYPE = 'longtask';
var LongTaskInstrumentation = /** @class */ (function (_super) {
    __extends(LongTaskInstrumentation, _super);
    /**
     *
     * @param config
     */
    function LongTaskInstrumentation(config) {
        if (config === void 0) { config = {}; }
        var _this = _super.call(this, '@opentelemetry/instrumentation-long-task', VERSION, config) || this;
        _this.version = VERSION;
        return _this;
    }
    LongTaskInstrumentation.prototype.init = function () { };
    LongTaskInstrumentation.prototype.isSupported = function () {
        if (typeof PerformanceObserver === 'undefined' ||
            !PerformanceObserver.supportedEntryTypes) {
            return false;
        }
        return PerformanceObserver.supportedEntryTypes.includes(LONGTASK_PERFORMANCE_TYPE);
    };
    LongTaskInstrumentation.prototype._createSpanFromEntry = function (entry) {
        var span = this.tracer.startSpan(LONGTASK_PERFORMANCE_TYPE, {
            startTime: hrTime(entry.startTime),
        });
        if (this._config.observerCallback) {
            try {
                this._config.observerCallback(span, { longtaskEntry: entry });
            }
            catch (err) {
                diag.error('longtask instrumentation: observer callback failed', err);
            }
        }
        span.setAttribute('longtask.name', entry.name);
        span.setAttribute('longtask.entry_type', entry.entryType);
        span.setAttribute('longtask.duration', entry.duration);
        if (Array.isArray(entry.attribution)) {
            entry.attribution.forEach(function (attribution, index) {
                var prefix = entry.attribution.length > 1
                    ? "longtask.attribution[" + index + "]"
                    : 'longtask.attribution';
                span.setAttribute(prefix + ".name", attribution.name);
                span.setAttribute(prefix + ".entry_type", attribution.entryType);
                span.setAttribute(prefix + ".start_time", attribution.startTime);
                span.setAttribute(prefix + ".duration", attribution.duration);
                span.setAttribute(prefix + ".container_type", attribution.containerType);
                span.setAttribute(prefix + ".container_src", attribution.containerSrc);
                span.setAttribute(prefix + ".container_id", attribution.containerId);
                span.setAttribute(prefix + ".container_name", attribution.containerName);
            });
        }
        span.end(hrTime(entry.startTime + entry.duration));
    };
    LongTaskInstrumentation.prototype.enable = function () {
        var _this = this;
        if (!this.isSupported()) {
            this._diag.debug('Environment not supported');
            return;
        }
        if (this._observer) {
            // Already enabled
            return;
        }
        this._observer = new PerformanceObserver(function (list) {
            list
                .getEntries()
                .forEach(function (entry) {
                return _this._createSpanFromEntry(entry);
            });
        });
        this._observer.observe({
            type: LONGTASK_PERFORMANCE_TYPE,
            buffered: true,
        });
    };
    LongTaskInstrumentation.prototype.disable = function () {
        if (!this._observer) {
            return;
        }
        this._observer.disconnect();
        this._observer = undefined;
    };
    return LongTaskInstrumentation;
}(InstrumentationBase));
export { LongTaskInstrumentation };
//# sourceMappingURL=instrumentation.js.map