"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LongTaskInstrumentation = void 0;
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const core_1 = require("@opentelemetry/core");
const api_1 = require("@opentelemetry/api");
const instrumentation_1 = require("@opentelemetry/instrumentation");
const version_1 = require("./version");
const LONGTASK_PERFORMANCE_TYPE = 'longtask';
class LongTaskInstrumentation extends instrumentation_1.InstrumentationBase {
    /**
     *
     * @param config
     */
    constructor(config = {}) {
        super('@opentelemetry/instrumentation-long-task', version_1.VERSION, config);
        this.version = version_1.VERSION;
    }
    init() { }
    isSupported() {
        if (typeof PerformanceObserver === 'undefined' ||
            !PerformanceObserver.supportedEntryTypes) {
            return false;
        }
        return PerformanceObserver.supportedEntryTypes.includes(LONGTASK_PERFORMANCE_TYPE);
    }
    _createSpanFromEntry(entry) {
        const span = this.tracer.startSpan(LONGTASK_PERFORMANCE_TYPE, {
            startTime: (0, core_1.hrTime)(entry.startTime),
        });
        if (this._config.observerCallback) {
            try {
                this._config.observerCallback(span, { longtaskEntry: entry });
            }
            catch (err) {
                api_1.diag.error('longtask instrumentation: observer callback failed', err);
            }
        }
        span.setAttribute('longtask.name', entry.name);
        span.setAttribute('longtask.entry_type', entry.entryType);
        span.setAttribute('longtask.duration', entry.duration);
        if (Array.isArray(entry.attribution)) {
            entry.attribution.forEach((attribution, index) => {
                const prefix = entry.attribution.length > 1
                    ? `longtask.attribution[${index}]`
                    : 'longtask.attribution';
                span.setAttribute(`${prefix}.name`, attribution.name);
                span.setAttribute(`${prefix}.entry_type`, attribution.entryType);
                span.setAttribute(`${prefix}.start_time`, attribution.startTime);
                span.setAttribute(`${prefix}.duration`, attribution.duration);
                span.setAttribute(`${prefix}.container_type`, attribution.containerType);
                span.setAttribute(`${prefix}.container_src`, attribution.containerSrc);
                span.setAttribute(`${prefix}.container_id`, attribution.containerId);
                span.setAttribute(`${prefix}.container_name`, attribution.containerName);
            });
        }
        span.end((0, core_1.hrTime)(entry.startTime + entry.duration));
    }
    enable() {
        if (!this.isSupported()) {
            this._diag.debug('Environment not supported');
            return;
        }
        if (this._observer) {
            // Already enabled
            return;
        }
        this._observer = new PerformanceObserver(list => {
            list
                .getEntries()
                .forEach(entry => this._createSpanFromEntry(entry));
        });
        this._observer.observe({
            type: LONGTASK_PERFORMANCE_TYPE,
            buffered: true,
        });
    }
    disable() {
        if (!this._observer) {
            return;
        }
        this._observer.disconnect();
        this._observer = undefined;
    }
}
exports.LongTaskInstrumentation = LongTaskInstrumentation;
//# sourceMappingURL=instrumentation.js.map